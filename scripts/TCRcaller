#! /usr/bin/env python

def main():
    app = TCRcaller()
    app.run()

class TCRcaller(object):
    
    def __init__(self,):
        
        self.availableCommands = {
            'init':self.init,
            'addSample':self.addSample,
            'addFastq':self.addFastq
            }
        
        # import packages
        import sys
        import os
        import time

        self.initMessages = '----------------\n#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Running: '+' '.join(sys.argv)+'\n'

        # get command from commandline arguments
        try: TCRcaller.command = sys.argv[1]
        except IndexError:
            TCRcaller.command = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Commandline not valid, should be on the form "TCRcaller <command> <path> <options>" (currently: "'+' '.join(sys.argv)+'")\n'
            self.initMessages += msg
            sys.stderr.write(msg)
        
        # validate command
        if TCRcaller.command not in self.availableCommands:
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Command not valid, should be one of the following "'+'", "'.join(self.availableCommands)+'" (currently: "'+str(TCRcaller.command)+'")\n'
            TCRcaller.command = None
            self.initMessages += msg
            sys.stderr.write(msg)
        
        # get path from commandline arguments
        try: TCRcaller.path = os.path.abspath(sys.argv[2])
        except IndexError:
            TCRcaller.path = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Commandline not valid, should be on the form "TCRcaller <command> <path> <options>" (currently: "'+' '.join(sys.argv)+'")\n'
            self.initMessages += msg
            sys.stderr.write(msg)
        
        if 'ERROR' in self.initMessages and TCRcaller.path == None: sys.exit()
        
        self.initOrConnect()

    def init(self): pass

    def initOrConnect(self):

        # import packages
        import os
        import shutil
        import TCRLib
        import time

        # look for path
        pathExists = os.path.exists(TCRcaller.path)
        if not pathExists:
            msg = '#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Creating folder "'+TCRcaller.path+'".\n'
            self.initMessages += msg
            os.makedirs(TCRcaller.path)

        # open connection to logfile
        TCRcaller.logfile = TCRLib.logfile.Logfile(TCRcaller.path+'/logfile.txt', initMessages=self.initMessages)

        # Connect to or create database for storing information
        databaseExists = os.path.exists(TCRcaller.path+'/informationStorage')
        TCRcaller.database = TCRLib.database.Database(TCRcaller.path+'/informationStorage',TCRcaller,logfile=TCRcaller.logfile)
        if not pathExists or not databaseExists:
            msg = '#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Creating the database "'+TCRcaller.database.path+'".\n'
            TCRcaller.logfile.write(msg)
            TCRcaller.database.create()
    
    def run(self):

        # run command specific function
        if TCRcaller.command:self.availableCommands[TCRcaller.command]()

    def addSample(self,):

        # import packages
        import sys
        import time

        # get sample name from commandline
        try: sampleName = sys.argv[3]
        except IndexError:
            sampleName = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Please supply a sample name on the commandline "TCRcaller addSample <path> <sampleName>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        #try to add the name to the database
        if sampleName: TCRcaller.database.addSample(sampleName)

    def addFastq(self,):

        # import packages
        import sys
        import time

        # get sample name from commandline
        try: sampleName = sys.argv[3]
        except IndexError:
            sampleName = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Please supply a sample name on the commandline "TCRcaller addFastq <path> <sampleName> <r1> <r2>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        # get r1 from commandline
        try: r1 = sys.argv[4]
        except IndexError:
            r1 = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Please supply one or several fastq files on the commandline "TCRcaller addFastq <path> <sampleName> <r1> <r2>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        # get r2 from commandline
        try: r2 = sys.argv[5]
        except IndexError:
            r2 = None
            msg = '#WARNING#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Only one fastq file seems to be on the commandline, adding singlet reads "TCRcaller addFastq <path> <sampleName> <r1> <r2>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        #try to add the name to the database
        if sampleName: TCRcaller.database.addFastq(sampleName,r1,r2)

if __name__ == "__main__": main()