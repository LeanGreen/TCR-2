#! /usr/bin/env python

def main():
    app = TCRcaller()
    app.run()

class TCRcaller(object):
    
    def __init__(self,):
        
        self.availableCommands = {
            'init':self.init,
            'addSample':self.addSample,
            'addFastq':self.addFastq,
            'getTools':self.getTools,
            'findTCR':self.findTCR
            }
        
        # import packages
        import sys
        import os
        import time

        self.initMessages = '----------------\n#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Running: '+' '.join(sys.argv)+'\n'

        # get command from commandline arguments
        try: TCRcaller.command = sys.argv[1]
        except IndexError:
            TCRcaller.command = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Commandline not valid, should be on the form "TCRcaller <command> <path> <options>" (currently: "'+' '.join(sys.argv)+'")\n'
            self.initMessages += msg
            sys.stderr.write(msg)
        
        # validate command
        if TCRcaller.command not in self.availableCommands:
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Command not valid, should be one of the following "'+'", "'.join(self.availableCommands)+'" (currently: "'+str(TCRcaller.command)+'")\n'
            TCRcaller.command = None
            self.initMessages += msg
            sys.stderr.write(msg)
        
        # get path from commandline arguments
        try: TCRcaller.path = os.path.abspath(sys.argv[2])
        except IndexError:
            TCRcaller.path = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Commandline not valid, should be on the form "TCRcaller <command> <path> <options>" (currently: "'+' '.join(sys.argv)+'")\n'
            self.initMessages += msg
            sys.stderr.write(msg)
        
        if 'ERROR' in self.initMessages and TCRcaller.path == None: sys.exit()
        
        self.initOrConnect()

    def init(self): pass

    def initOrConnect(self):

        # import packages
        import os
        import shutil
        import TCRLib
        import time

        # look for path
        pathExists = os.path.exists(TCRcaller.path)
        if not pathExists:
            msg = '#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Creating folder "'+TCRcaller.path+'".\n'
            self.initMessages += msg
            os.makedirs(TCRcaller.path)

        # open connection to logfile
        TCRcaller.logfile = TCRLib.logfile.Logfile(TCRcaller.path+'/logfile.txt', initMessages=self.initMessages)

        # Connect to or create database for storing information
        databaseExists = os.path.exists(TCRcaller.path+'/informationStorage')
        TCRcaller.database = TCRLib.database.Database(TCRcaller.path+'/informationStorage',TCRcaller,logfile=TCRcaller.logfile)
        if not pathExists or not databaseExists:
            msg = '#LOGMSG#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Creating the database "'+TCRcaller.database.path+'".\n'
            TCRcaller.logfile.write(msg)
            TCRcaller.database.create()
    
    def run(self):

        import sys
        
        if 'getTools' in sys.argv: self.getTools()
        if 'getReferences' in sys.argv: self.getNCBIreference()
        if 'getTools' in sys.argv or 'getReferences' in sys.argv: sys.exit()
        else:

            # run command specific function
            if TCRcaller.command:self.availableCommands[TCRcaller.command]()

    def addSample(self,):

        # import packages
        import sys
        import time

        # get sample name from commandline
        try: sampleName = sys.argv[3]
        except IndexError:
            sampleName = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Please supply a sample name on the commandline "TCRcaller addSample <path> <sampleName>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        #try to add the name to the database
        if sampleName: TCRcaller.database.addSample(sampleName)

    def addFastq(self,):

        # import packages
        import sys
        import time

        # get sample name from commandline
        try: sampleName = sys.argv[3]
        except IndexError:
            sampleName = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Please supply a sample name on the commandline "TCRcaller addFastq <path> <sampleName> <r1> <r2>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        # get r1 from commandline
        try: r1 = sys.argv[4]
        except IndexError:
            r1 = None
            msg = '#ERROR#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Please supply one or several fastq files on the commandline "TCRcaller addFastq <path> <sampleName> <r1> <r2>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        # get r2 from commandline
        try: r2 = sys.argv[5]
        except IndexError:
            r2 = None
            msg = '#WARNING#'+time.strftime("%Y-%m-%d:%H:%M:%S",time.localtime())+'# Only one fastq file seems to be on the commandline, adding singlet reads "TCRcaller addFastq <path> <sampleName> <r1> <r2>" (currently: "'+' '.join(sys.argv)+'")\n'
            TCRcaller.logfile.write(msg)
            sys.stderr.write(msg)

        #try to add the name to the database
        if sampleName: TCRcaller.database.addFastq(sampleName,r1,r2)

    def getTools(self,):
        
        import sys
        import os
        import urllib
        import subprocess
        
        # find script path
        path = os.path.abspath(sys.argv[0])
        path = os.path.abspath('/'.join(sys.argv[0].split('/')[:-2]))

        # make bin directory
        try: os.mkdir(path+'/bin')
        except OSError: pass
        currentPath = os.path.abspath('.')
        
        #bowtie
        if not os.path.exists(path+'/bin/bowtie2-2.2.4'):
            sys.stderr.write('Fetching bowtie...')
            bowtie2Link="http://downloads.sourceforge.net/project/bowtie-bio/bowtie2/2.2.4/bowtie2-2.2.4-linux-x86_64.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fbowtie-bio%2Ffiles%2Fbowtie2%2F2.2.4%2F&ts=1424705468&use_mirror=heanet"
            if sys.platform=='darwin':bowtie2Link="http://downloads.sourceforge.net/project/bowtie-bio/bowtie2/2.2.4/bowtie2-2.2.4-macos-x86_64.zip?r=http%3A%2F%2Fsourceforge.net%2Fprojects%2Fbowtie-bio%2Ffiles%2Fbowtie2%2F2.2.4%2F&ts=1424705504&use_mirror=heanet"
            urllib.urlretrieve (bowtie2Link, path+'/bin/'+"bt2.zip")
            os.chdir(path+'/bin')

            sys.stderr.write('done\n')
            
            sys.stderr.write('decompressing bowtie ...')
            command = ['unzip',path+'/bin/'+"bt2.zip"]
            unzip = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
            errdata = unzip.communicate()
            if unzip.returncode != 0:
		print 'cmd: '+' '.join( command )
		print 'unzip view Error code', unzip.returncode, errdata
		sys.exit()
            sys.stderr.write('done\n')
            
            os.chdir(currentPath)
            sys.stderr.write('testing bowtie...')
            command = [path+'/bin/bowtie2-2.2.4/'+'bowtie2','--version']
            bt2 = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
            errdata = bt2.communicate()
            if bt2.returncode != 0:
		print 'cmd: '+' '.join( command )
		print 'bt2 view Error code', bt2.returncode, errdata
		sys.exit()
            sys.stderr.write('done\n')

        #samtools
        if not os.path.exists(path+'/bin/samtools-1.2'):
            sys.stderr.write('Fetching samtools...')

            samtoolsLink="http://downloads.sourceforge.net/project/samtools/samtools/1.2/samtools-1.2.tar.bz2?r=&ts=1424705289&use_mirror=cznic"
            urllib.urlretrieve (samtoolsLink, path+'/bin/'+"samtools.tar.bz2")
            sys.stderr.write('done\n')
            os.chdir(path+'/bin')

            sys.stderr.write('decompressing samtools ...')
            command = ['tar','-xvjf',path+'/bin/'+"samtools.tar.bz2"]
            if sys.platform=='darwin':command = ['tar','-xvzf',path+'/bin/'+"samtools.tar.bz2"]
            tar = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
            errdata = tar.communicate()
            if tar.returncode != 0:
		print 'cmd: '+' '.join( command )
		print 'tar view Error code', tar.returncode, errdata
		sys.exit()
            sys.stderr.write('done\n')
            
            os.chdir(path+'/bin/samtools-1.2')
            sys.stderr.write('building samtools...')
            command = ['make']
            build = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
            errdata = build.communicate()
#            if bt2.returncode != 0:
#		print 'cmd: '+' '.join( command )
#		print 'bt2 view Error code', bt2.returncode, errdata
#		sys.exit()
            sys.stderr.write('done\n')

            os.chdir(currentPath)
            sys.stderr.write('testing samtools...')
            command = [path+'/bin/samtools-1.2/'+'samtools','--version']
            samtools = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
            errdata = samtools.communicate()
            if samtools.returncode != 0:
		print 'cmd: '+' '.join( command )
		print 'bt2 view Error code', samtools.returncode, errdata
		sys.exit()
            sys.stderr.write('done\n')

        #velvet
        if not os.path.exists(path+'/bin/velvet_1.2.10'):
            sys.stderr.write('Fetching velvet...')
            velvetLink="https://www.ebi.ac.uk/~zerbino/velvet/velvet_1.2.10.tgz"
            urllib.urlretrieve (velvetLink, path+'/bin/'+"velvet.tgz")
            sys.stderr.write('done\n')
            os.chdir(path+'/bin')
            
            sys.stderr.write('decompressing velvet ...')
            command = ['tar','-xvzf',path+'/bin/'+"velvet.tgz"]
            tar = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
            errdata = tar.communicate()
            if tar.returncode != 0:
		print 'cmd: '+' '.join( command )
		print 'tar view Error code', tar.returncode, errdata
		sys.exit()
            sys.stderr.write('done\n')
            
            os.chdir(path+'/bin/velvet_1.2.10')
            sys.stderr.write('building velvet_1.2.10 ...')
            command = ['make']
            build = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
            errdata = build.communicate()
#            if bt2.returncode != 0:
#		print 'cmd: '+' '.join( command )
#		print 'bt2 view Error code', bt2.returncode, errdata
#		sys.exit()
            sys.stderr.write('done\n')

            os.chdir(currentPath)
            sys.stderr.write('velvet_1.2.10 is not tested automatically and might need to be tested manually...')
            sys.stderr.write('done\n')

    def getNCBIreference(self,):

        import sys
        import os
        import urllib
        import subprocess

        # find script path
        path = os.path.abspath(sys.argv[0])
        path = os.path.abspath('/'.join(sys.argv[0].split('/')[:-2]))

        sys.stderr.write('fetching ids from NCBI ...')
        ntrezsearch='http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=nucleotide&term="T cell receptor"+AND+%22Homo%20sapiens%22[porgn]+AND+biomol_mrna[PROP]&retmax=100000'
        ntrezsearch='http://eutils.ncbi.nlm.nih.gov/entrez/eutils/esearch.fcgi?db=nucleotide&term=t+cell+receptor+AND+%22Homo%20sapiens%22[porgn]+AND+biomol_mrna[PROP]+AND+(%22100%22[SLEN]+:+%2210000%22[SLEN]))&retmax=100000'
        urllib.urlretrieve (ntrezsearch, path+'/tmpfile.entrezmRNAs.txt')
        sys.stderr.write('done\n')
        
        sys.stderr.write('downloading sequences from NCBI ...')
        import re
        ids = []
        for row in open(path+'/tmpfile.entrezmRNAs.txt'):
            pattern = "<Id>(?P<id>\d+)</Id>"
            p = re.compile(pattern)
	    m = p.search(row)
	    if m: ids.append( m.groupdict()['id'] )
        start = 0
        end = 100
        os.remove(path+'/tmpfile.entrezmRNAs.txt')
        import time
        reffile=open(path+'/references/ncbi.reference.'+time.strftime("%Y-%m-%d",time.localtime())+'.fa','w')
        pattern  = "(T cell (antigen )?receptor)"
        pattern += "|(T-cell (antigen )?receptor)"
        pattern += "|(TCR (alpha|beta) chain)"
        pattern += "|(TCR(A|B))"
        p=re.compile(pattern)
        for i in range(len(ids)%100):
            ntrezget = 'http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi?db=nuccore&id='+','.join(ids[start:end])+'&rettype=fasta&retmode=text'
            urllib.urlretrieve (ntrezget, path+'/tmpfile.entrezmRNAs'+str(start)+'-'+str(end)+'.fa')
            for line in open(path+'/tmpfile.entrezmRNAs'+str(start)+'-'+str(end)+'.fa'):
                if line[0] == ">":
                    if p.search(line,):tofile = True
                    else: tofile =False
                if tofile: reffile.write(line)
            os.remove(path+'/tmpfile.entrezmRNAs'+str(start)+'-'+str(end)+'.fa')
            start += 100
            end   += 100
            time.sleep(1)
        sys.stderr.write('done\n')

        sys.stderr.write('bulding bowtie2 reference ...')
        command = ['bin/bowtie2-2.2.4/bowtie2-build',path+'/references/ncbi.reference.'+time.strftime("%Y-%m-%d",time.localtime())+'.fa',path+'/references/ncbi.reference.'+time.strftime("%Y-%m-%d",time.localtime())+'.fa']
        bt2build = subprocess.Popen(command,stdout=subprocess.PIPE,stderr=subprocess.PIPE )
        errdata = bt2build.communicate()
        if bt2build.returncode != 0:
            print 'cmd: '+' '.join( command )
            print 'tar view Error code', bt2build.returncode, errdata
            sys.exit()
        sys.stderr.write('done\n')

    def findTCR(self):
        
        for sample in TCRcaller.database.getSamples():
            sample.align()
            sample.postAlign()
            sample.getAlignedReadsPairs()
            sample.assemble()
            sample.report()
        
if __name__ == "__main__": main()